platform :ios, '13.0'
use_frameworks! :linkage => :static
use_modular_headers!

flutter_application_path = File.expand_path('..', __dir__)

# --- Helper to normalize plugin paths ---
def normalize_plugin_root(base, plugin_path)
  return File.expand_path(plugin_path) if plugin_path.start_with?('/', '~')
  return plugin_path if plugin_path =~ %r{^[A-Za-z]:[\\/]}
  adjusted = plugin_path.start_with?('Users/') ? "/#{plugin_path}" : plugin_path
  File.expand_path(File.join(base, adjusted))
end

target 'Runner' do
  # Build both Debug & Release engine frameworks so both podspecs exist
  debug_podspec   = File.expand_path(File.join(__dir__, 'Flutter', 'Debug',   'Flutter.podspec'))
  release_podspec = File.expand_path(File.join(__dir__, 'Flutter', 'Release', 'Flutter.podspec'))

  unless File.exist?(debug_podspec) && File.exist?(release_podspec)
    puts "‚öôÔ∏è Generating missing Flutter iOS frameworks..."
    system('flutter build ios-framework --debug --cocoapods --output=ios/Flutter || true')
    system('flutter build ios-framework --release --cocoapods --output=ios/Flutter || true')
  end

  config = (ENV['CONFIGURATION'] || 'Release').capitalize
  engine_podspec = (config == 'Debug') ? debug_podspec : release_podspec
  abort("‚ùå Missing engine podspec at #{engine_podspec}") unless File.exist?(engine_podspec)

  # ‚úÖ FIX: use :path instead of :podspec to avoid "Unsupported download strategy"
  pod 'Flutter', :path => File.dirname(engine_podspec)

  plugin_file = File.expand_path(File.join(flutter_application_path, '.flutter-plugins-dependencies'))
  if File.exist?(plugin_file)
    require 'json'
    plugins = JSON.parse(File.read(plugin_file))['plugins'] || {}
    ios_plugins = plugins['ios'] || []

    home_cache = File.expand_path('~/.pub-cache')

    ios_plugins.each do |plugin|
      name = plugin['name']
      declared_path = plugin['path'] || ''
      plugin_root = normalize_plugin_root(flutter_application_path, declared_path)

      candidates = [
        File.join(plugin_root, 'ios'),
        plugin_root,
        File.join(home_cache, 'hosted', 'pub.dev', "#{name}-*", 'ios'),
        File.join(home_cache, 'git', "#{name}-*", 'ios')
      ].flat_map { |pattern| Dir.glob(pattern) }

      resolved = candidates.find { |dir| File.exist?(File.join(dir, "#{name}.podspec")) }

      # ü©π Special fallback for webview_flutter_wkwebview
      if !resolved && name == 'webview_flutter_wkwebview'
        resolved = File.join(home_cache, 'hosted', 'pub.dev', 'webview_flutter_wkwebview-3.23.1', 'ios')
      end

      if resolved
        puts "‚úÖ Using #{name} from #{resolved}"
        pod name, :path => resolved
      else
        puts "‚ö†Ô∏è Skipping #{name}: podspec not found in any of: #{candidates.join(', ')}"
      end
    end
  else
    puts "‚ÑπÔ∏è No .flutter-plugins-dependencies found at #{plugin_file}"
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |c|
      c.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      c.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
    end
  end
end
