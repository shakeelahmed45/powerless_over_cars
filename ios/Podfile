platform :ios, '13.0'
use_frameworks! :linkage => :static
use_modular_headers!

flutter_application_path = '../'

target 'Runner' do
  config = ENV['CONFIGURATION'] || 'Release'
  engine_podspec = File.expand_path(File.join(__dir__, 'Flutter', config, 'Flutter.podspec'))

  # ✅ Automatically build Flutter frameworks if missing
  unless File.exist?(engine_podspec)
    puts "⚙️ Flutter podspec not found at #{engine_podspec}. Generating now..."
    system("flutter build ios-framework --cocoapods --output=ios/Flutter --#{config.downcase}")
  end

  unless File.exist?(engine_podspec)
    abort("❌ Still missing #{engine_podspec} after generation attempt.")
  end

  pod 'Flutter', :podspec => engine_podspec

  # ✅ Load plugin dependencies from .flutter-plugins-dependencies
  plugin_file = File.expand_path(File.join(flutter_application_path, '.flutter-plugins-dependencies'))
  if File.exist?(plugin_file)
    require 'json'
    ios_plugins = (JSON.parse(File.read(plugin_file))['plugins'] || {})['ios'] || []
    ios_plugins.each do |p|
      pod p['name'], :path => File.expand_path(File.join(flutter_application_path, p['path'], 'ios'))
    end
  end
end

# ✅ Ensure deployment target and framework distribution compatibility
post_install do |installer|
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |c|
      c.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      c.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
    end
  end
end
